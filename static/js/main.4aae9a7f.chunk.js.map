{"version":3,"sources":["components/Status/index.js","components/Status/Status.js","components/Board/index.js","components/Board/Board.js","components/App/index.js","components/App/App.js","index.js"],"names":["Status","props","id","className","message","href","Board","state","turn","gameEnded","winner","undefined","gameState","board","Array","fill","totalMoves","event","this","target","dataset","square","classList","add","setState","result","checkWinner","winnerLine","moves","i","length","Fragment","onClick","e","clicked","map","element","key","data-square","Component","App","ReactDOM","render","document","getElementById"],"mappings":"0NACeA,ECCA,SAAAC,GACb,OACE,yBAAKC,GAAG,SAASC,UAAWF,EAAMG,QAAU,UAAY,IACtD,4BAAKH,EAAMG,SACX,uBAAGC,KAAK,MAAR,aCLSC,E,2MCGbC,MAAQ,CACNC,KAAM,IACNC,WAAW,EACXC,YAAQC,G,EAGVC,UAAY,CACVC,MAAOC,MAAM,GAAGC,KAAK,IACrBC,WAAY,G,uEAGNC,GACN,GAAIC,KAAKX,MAAME,UACb,OAAO,EAGT,IAAII,EAAQK,KAAKN,UAAUC,MACgB,KAAvCA,EAAMI,EAAME,OAAOC,QAAQC,UAC7BR,EAAMI,EAAME,OAAOC,QAAQC,QAAUH,KAAKX,MAAMC,KAChDS,EAAME,OAAOG,UAAUC,IAAI,YAC3BN,EAAME,OAAOG,UAAUC,IAAwB,MAApBL,KAAKX,MAAMC,KAAe,WAAa,YAClEU,KAAKM,SAAS,CACZhB,KAA0B,MAApBU,KAAKX,MAAMC,KAAe,IAAM,MAExCU,KAAKN,UAAY,CACfC,MAAOA,EACPG,WAAYE,KAAKN,UAAUI,WAAa,IAI5C,IAAIS,EAASP,KAAKQ,cAEH,MAAXD,EACFP,KAAKM,SAAS,CACZf,WAAW,EACXC,OAAQ,IACRiB,WAAY,mBAEM,MAAXF,EACTP,KAAKM,SAAS,CACZf,WAAW,EACXC,OAAQ,IACRiB,WAAY,mBAEM,SAAXF,GACTP,KAAKM,SAAS,CACZf,WAAW,EACXC,OAAQ,OACRiB,WAAY,mB,oCAQhB,IAFA,IAAIC,EAAQ,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,IAC7Ff,EAAQK,KAAKN,UAAUC,MAClBgB,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAChC,GAAIhB,EAAMe,EAAMC,GAAG,MAAQhB,EAAMe,EAAMC,GAAG,KAAOhB,EAAMe,EAAMC,GAAG,MAAQhB,EAAMe,EAAMC,GAAG,IACrF,OAAOhB,EAAMe,EAAMC,GAAG,IAI1B,GAAkC,IAA9BX,KAAKN,UAAUI,WACjB,MAAO,S,+BAID,IAAD,OACP,OACE,kBAAC,IAAMe,SAAP,KACE,kBAAC,EAAD,CAAQ3B,QAASc,KAAKX,MAAMoB,aAC5B,yBAAKzB,GAAG,QAAQC,UAA+B,MAApBe,KAAKX,MAAMC,KAAe,WAAa,WAAYwB,QAAS,SAAAC,GAAC,OAAI,EAAKC,QAAQD,KACtGf,KAAKN,UAAUC,MAAMsB,KAAI,SAACC,EAASP,GAClC,OAAO,yBAAKQ,IAAKR,EAAG1B,UAAU,SAASmC,cAAaT,a,GA1E5CU,aCFLC,ECEH,WACV,OACE,yBAAKtC,GAAG,QACN,kBAAC,EAAD,QCDNuC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.4aae9a7f.chunk.js","sourcesContent":["import Status from './Status';\nexport default Status;\n","import React from 'react';\n\nconst Status = props => {\n  return (\n    <div id=\"status\" className={props.message ? 'visible' : ''}>\n      <h3>{props.message}</h3>\n      <a href=\"./\">Restart</a>\n    </div>\n  );\n};\n\nexport default Status;\n","import Board from './Board';\nexport default Board;\n","import React, { Component } from 'react';\nimport Status from '../Status';\n\nclass Board extends Component {\n  state = {\n    turn: 'X',\n    gameEnded: false,\n    winner: undefined\n  };\n\n  gameState = {\n    board: Array(9).fill(''),\n    totalMoves: 0\n  };\n\n  clicked(event) {\n    if (this.state.gameEnded) {\n      return false;\n    }\n\n    let board = this.gameState.board;\n    if (board[event.target.dataset.square] === '') {\n      board[event.target.dataset.square] = this.state.turn;\n      event.target.classList.add('selected');\n      event.target.classList.add(this.state.turn === 'X' ? 'player-1' : 'player-2');\n      this.setState({\n        turn: this.state.turn === 'X' ? 'O' : 'X'\n      });\n      this.gameState = {\n        board: board,\n        totalMoves: this.gameState.totalMoves + 1\n      };\n    }\n\n    let result = this.checkWinner();\n\n    if (result === 'X') {\n      this.setState({\n        gameEnded: true,\n        winner: 'X',\n        winnerLine: 'Player 1 wins!'\n      });\n    } else if (result === 'O') {\n      this.setState({\n        gameEnded: true,\n        winner: 'O',\n        winnerLine: 'Player 2 wins!'\n      });\n    } else if (result === 'draw') {\n      this.setState({\n        gameEnded: true,\n        winner: 'draw',\n        winnerLine: 'It is a tie!'\n      });\n    }\n  }\n\n  checkWinner() {\n    let moves = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    let board = this.gameState.board;\n    for (let i = 0; i < moves.length; i++) {\n      if (board[moves[i][0]] === board[moves[i][1]] && board[moves[i][1]] === board[moves[i][2]]) {\n        return board[moves[i][0]];\n      }\n    }\n\n    if (this.gameState.totalMoves === 9) {\n      return 'draw';\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Status message={this.state.winnerLine} />\n        <div id=\"board\" className={this.state.turn === 'X' ? 'player-1' : 'player-2'} onClick={e => this.clicked(e)}>\n          {this.gameState.board.map((element, i) => {\n            return <div key={i} className=\"square\" data-square={i}></div>;\n          })}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Board;\n","import App from './App';\nexport default App;\n","import React from 'react';\nimport Board from '../Board';\n\nconst App = () => {\n  return (\n    <div id=\"game\">\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/scss/style.scss';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}